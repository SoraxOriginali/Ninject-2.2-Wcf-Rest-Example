using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;
using System.Text;

namespace WcfRestService1
{
	// Start the service and browse to http://<machine_name>:<port>/Service1/help to view the service's generated help page
	// NOTE: By default, a new instance of the service is created for each call; change the InstanceContextMode to Single if you want
	// a single instance of the service to process all calls.	
	[ServiceContract]
	[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	// The purpose of the Ninject WCF Extension is to handle InstanceContextMode.PerCall service behavior.  The WCF REST approach does not have any support
	// for InstanceContext.PerSession so you should not be using it (if you need such functionality, implement your REST functionality using ASP.NET).  
	// While WCF REST does support InstanceContextMode.Single, you probably want to avoid using the Ninject WCF Extension with it since
	// it was designed to handle InstanceContextMode.PerCall and could cause some problems.  You also probably want to avoid sharing the instance of the Ninject
	// Kernel used by the Ninject WCF Extension too.  For InstanceContextMode.Single services, you can use the core Ninject library.
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public class Service1
	{
		private readonly IRepository _repository;

		// Implementing your WCF REST service using Interfaces (as opposed to concrete types) is the whole reason
		// for using the Ninject WCF Extension.  If you don't use the WCF Extension, you have to handle creation of the kernel
		// and per WCF REST Request deactivation yourself.  
		public Service1(IRepository repository)
		{
			// We moved the template generated functionality for GetCollection() to the Repository class which
			// implements the IRepository interface
			_repository = repository;
		}

		[WebGet(UriTemplate = "")]
		public List<SampleItem> GetCollection()
		{
			return _repository.GetCollection();
		}

		// The other methods automatically generated by the project template were deleted since only one
		// method is required to illustrate how to use the Ninject WCF Extension with WCF REST

	}
}
